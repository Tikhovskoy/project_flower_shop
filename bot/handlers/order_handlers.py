import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext
from bot.logic.order_flow import create_order, add_card_text, set_contact_info, confirm_order
from bot.message_tools import safe_delete_message
from bot.logging_tools import log_validation_error, log_unexpected_error
from bot.exceptions import InvalidPhoneError, InvalidDateTimeError, OrderSaveError
from bot.logic.validators import normalize_datetime


def handle_order_start(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –æ—Ç–∫—Ä—ã—Ç–∫—É."""
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id

    idx = context.user_data.get("current_bouquet", 0)
    bouquet = context.user_data["bouquets"][idx]
    context.user_data["order_data"] = create_order(bouquet)
    context.user_data["order_step"] = "card"

    safe_delete_message(query)

    context.bot.send_message(
        chat_id=chat_id,
        text="üíå –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É –∫ –±—É–∫–µ—Ç—É?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞", callback_data="add_card_yes")],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data="add_card_no")]
        ])
    )


def handle_card_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: –Ω—É–∂–Ω–∞ –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∫–∞."""
    query = update.callback_query
    choice = query.data
    chat_id = query.message.chat_id

    safe_delete_message(query)

    if choice == "add_card_yes":
        context.user_data["order_step"] = "card_text"
        context.bot.send_message(chat_id=chat_id, text="‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏:")
    else:
        context.user_data["order_step"] = "name"
        context.bot.send_message(chat_id=chat_id, text="üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")


def process_order_step(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    step = context.user_data.get("order_step")
    order_data = context.user_data.get("order_data")

    try:
        if step == "card_text":
            add_card_text(order_data, text)
            context.user_data["order_step"] = "name"
            update.message.reply_text("üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
            return

        elif step == "name":
            context.user_data["customer_name"] = text
            context.user_data["order_step"] = "address"
            update.message.reply_text("üè° –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
            return

        elif step == "address":
            context.user_data["address"] = text
            context.user_data["order_step"] = "delivery_time"
            update.message.reply_text("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2025-03-27 14:00):")
            return

        elif step == "delivery_time":
            try:
                normalized_time = normalize_datetime(text)
                if not normalized_time:
                    raise InvalidDateTimeError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 2025-03-27 14:00")

                context.user_data["delivery_time"] = normalized_time
                context.user_data["order_step"] = "phone"
                update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
                return

            except InvalidDateTimeError as e:
                log_validation_error("–û—à–∏–±–∫–∞ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏", e)
                update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü—Ä–∏–º–µ—Ä: 2025-03-27 14:00\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."
                )
                return

        elif step == "phone":
            order = set_contact_info(
                order_data,
                customer_name=context.user_data["customer_name"],
                address=context.user_data["address"],
                phone=text,
                delivery_time=context.user_data["delivery_time"]
            )
            confirm_order(order)
            send_order_to_courier(context, order)
            update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –ö—É—Ä—å–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")
            context.user_data.clear()
            return

        context.user_data.clear()
        update.message.reply_text("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —à–∞–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        return

    except (InvalidPhoneError, InvalidDateTimeError) as e:
        log_validation_error(f"–û—à–∏–±–∫–∞ –≤ process_order_step (—à–∞–≥ {step})", str(e))
        update.message.reply_text(f"‚ùå {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return

    except OrderSaveError as e:
        log_unexpected_error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", str(e))
        update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    except Exception as e:
        log_unexpected_error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ process_order_step (—à–∞–≥ {step})", str(e))
        update.message.reply_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return


def send_order_to_courier(context: CallbackContext, order_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä—É."""
    courier_id = os.getenv("COURIER_ID")
    if not courier_id:
        log_unexpected_error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç COURIER_ID –≤ .env", Exception("COURIER_ID is not set"))
        return

    text = (
        "üöö –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üíê –ë—É–∫–µ—Ç: {order_data['bouquet_name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {order_data['price']}‚ÇΩ\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {order_data['customer_name']}\n"
        f"üè° –ê–¥—Ä–µ—Å: {order_data['delivery_address']}\n"
        f"üìÖ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_time'].strftime('%d.%m %H:%M')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data['phone_number']}\n"
    )

    if order_data.get("card_text"):
        text += f"\nüíå –û—Ç–∫—Ä—ã—Ç–∫–∞: {order_data['card_text']}"

    context.bot.send_message(chat_id=courier_id, text=text)
