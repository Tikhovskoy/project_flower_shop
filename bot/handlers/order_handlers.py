import os
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CallbackContext
from bot.logic.order_flow import create_order, add_card_text, set_contact_info, confirm_order
from bot.message_tools import safe_delete_message
from bot.logic.validators import normalize_datetime
from bot.handlers.handlers_config import COURIER_ID


def handle_order_start(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –æ—Ç–∫—Ä—ã—Ç–∫—É."""
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id

    idx = context.user_data.get("current_bouquet", 0)
    bouquet = context.user_data["bouquets"][idx]
    context.user_data["order_data"] = create_order(bouquet)
    context.user_data["order_step"] = "card"

    safe_delete_message(query)

    context.bot.send_message(
        chat_id=chat_id,
        text="üíå –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É –∫ –±—É–∫–µ—Ç—É?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("–î–∞", callback_data="add_card_yes")],
            [InlineKeyboardButton("–ù–µ—Ç", callback_data="add_card_no")]
        ])
    )

def handle_card_choice(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: –Ω—É–∂–Ω–∞ –ª–∏ –æ—Ç–∫—Ä—ã—Ç–∫–∞."""
    query = update.callback_query
    choice = query.data
    if choice == "add_card_yes":
        context.user_data["order_step"] = "card_text"
        query.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∫–∏:")
    else:
        context.user_data["order_step"] = "name"
        query.edit_message_text("üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

def process_order_step(update: Update, context: CallbackContext):
    """–ü–æ—à–∞–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    text = update.message.text.strip()
    step = context.user_data.get("order_step")
    order_data = context.user_data.get("order_data")

    if step == "card_text":
        add_card_text(order_data, text)
        context.user_data["order_step"] = "name"
        update.message.reply_text("üë§ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

    elif step == "name":
        context.user_data["customer_name"] = text
        context.user_data["order_step"] = "address"
        update.message.reply_text("üè° –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")

    elif step == "address":
        context.user_data["address"] = text
        context.user_data["order_step"] = "delivery_time"
        update.message.reply_text("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –°–µ–≥–æ–¥–Ω—è 15:00):")

    elif step == "delivery_time":
        from bot.logic.validators import normalize_datetime
        normalized_time = normalize_datetime(text)
        if normalized_time is None:
            update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏. –ü—Ä–∏–º–µ—Ä: '2025-03-27T14:00'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏:")
            return  
        context.user_data["delivery_time"] = normalized_time
        context.user_data["order_step"] = "phone"
        update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

    elif step == "phone":
        try:
            order = set_contact_info(
                order_data,
                customer_name=context.user_data["customer_name"],
                address=context.user_data["address"],
                phone=text,
                delivery_time=context.user_data["delivery_time"]
            )
            confirm_order(order)
            send_order_to_courier(context, order)

            update.message.reply_text("‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –ö—É—Ä—å–µ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")
            context.user_data.clear()
        except ValueError as e:
            update.message.reply_text(f"‚ùå {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞:")
    else:
        context.user_data.clear()

def send_order_to_courier(context: CallbackContext, order_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –∫—É—Ä—å–µ—Ä—É."""
    import os
    COURIER_ID = os.getenv("COURIER_ID")
    text = (
        "üöö –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üíê –ë—É–∫–µ—Ç: {order_data['bouquet_name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {order_data['price']}‚ÇΩ\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {order_data['customer_name']}\n"
        f"üè° –ê–¥—Ä–µ—Å: {order_data['address']}\n"
        f"üìÖ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {order_data['delivery_time'].strftime('%d.%m %H:%M')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data['phone']}\n"
    )
    if order_data.get("card_text"):
        text += f"\nüíå –û—Ç–∫—Ä—ã—Ç–∫–∞: {order_data['card_text']}"
    context.bot.send_message(chat_id=COURIER_ID, text=text)
