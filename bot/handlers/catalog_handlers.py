from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from django.conf import settings
from bot.logic.order_flow import start_bouquets, start_compositions
from bot.message_tools import safe_delete_message


def handle_budget_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—é–¥–∂–µ—Ç–∞."""
    query = update.callback_query
    data = query.data

    if data == "any":
        min_price, max_price = 0, 9999999
    elif data == "more":
        min_price, max_price = 2000, 9999999
    else:
        budget = int(data)
        min_price = max(0, budget - 500)
        max_price = budget

    event = context.user_data.get("event")
    if event and event.lower() in ["wedding", "march8", "teacher", "no_reason", "birthday", "school", "custom"]:
        bouquets = start_compositions(event, min_price, max_price)
    else:
        bouquets = start_bouquets(min_price, max_price)

    if not bouquets:
        query.edit_message_text("üòî –ù–µ—Ç –±—É–∫–µ—Ç–æ–≤ –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.")
        return

    context.user_data["bouquets"] = bouquets
    context.user_data["current_bouquet"] = 0

    show_current_bouquet(update, context)


def handle_full_collection(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –±—É–∫–µ—Ç–æ–≤ –ø–æ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –±—é–¥–∂–µ—Ç—É."""
    query = update.callback_query
    query.answer()

    event = context.user_data.get("event")

    if event and event.lower() in ["wedding", "no_reason", "birthday", "school", "custom"]:
        bouquets = start_compositions(event, min_price=0, max_price=9999999)
    else:
        bouquets = start_bouquets(min_price=0, max_price=9999999)

    if not bouquets:
        query.edit_message_text("üòî –ù–µ—Ç –±—É–∫–µ—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏.")
        return

    context.user_data["bouquets"] = bouquets
    context.user_data["current_bouquet"] = 0

    show_current_bouquet(update, context)


def show_current_bouquet(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—É–∫–µ—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    chat_id = None
    if update.callback_query:
        query = update.callback_query
        chat_id = query.message.chat_id
        safe_delete_message(query)
    elif update.message:
        chat_id = update.message.chat_id

    if not chat_id:
        return

    idx = context.user_data.get("current_bouquet", 0)
    bouquets = context.user_data.get("bouquets", [])

    if not bouquets:
        context.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—É–∫–µ—Ç–æ–≤.")
        return

    bouquet = bouquets[idx % len(bouquets)]

    poetic = bouquet.poetic_text.strip() if getattr(bouquet, "poetic_text", "") else ""
    poetic = f"<i>{poetic}</i>\n\n" if poetic else ""

    caption_text = (
        f"<b>{bouquet.name}</b>\n"
        f"<i>–¶–µ–Ω–∞:</i> {bouquet.price} ‚ÇΩ\n\n"
        f"{poetic}"
        f"{bouquet.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'}"
    )

    main_buttons = [
        [InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç", callback_data="start_order")],
        [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –±—É–∫–µ—Ç", callback_data="show_catalog")],
    ]

    bottom_buttons = [
        [InlineKeyboardButton("üå∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∫–æ–ª–ª–µ–∫—Ü–∏—é", callback_data="show_full_collection")],
        [InlineKeyboardButton("üìû –ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="request_consult")]
    ]

    if bouquet.photo:
        photo_path = f"{settings.MEDIA_ROOT}/{bouquet.photo.name}"
        with open(photo_path, "rb") as photo:
            context.bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=caption_text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(main_buttons)
            )
    else:
        context.bot.send_message(
            chat_id=chat_id,
            text=caption_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(main_buttons)
        )

    context.bot.send_message(
        chat_id=chat_id,
        text="<b>–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?</b> –ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(bottom_buttons)
    )


def handle_catalog(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—É–∫–µ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞."""
    context.user_data["current_bouquet"] += 1
    bouquets = context.user_data["bouquets"]
    context.user_data["current_bouquet"] %= len(bouquets)
    show_current_bouquet(update, context)
